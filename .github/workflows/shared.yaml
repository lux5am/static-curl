name: build-shared

on:
  # run it manually
  schedule:
    - cron: "0 12 * * SUN"
  # run it manually
  workflow_dispatch:
    inputs:
      CURL_VERSION:
        description: 'cURL Version'
        required: false
        default: ''
        type: string
      ENABLE_ECH:
        description: 'Enable ECH Support'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      TLS_LIB:
        description: 'TLS Library (only openssl is supported for now)'
        required: false
        default: 'openssl'
        type: string
      OPENSSL_VERSION:
        description: 'OpenSSL Version'
        required: false
        default: 'dev'
        type: string
      OPENSSL_BRANCH:
        description: 'OpenSSL Branch'
        required: false
        default: 'feature/ech'
        type: string

jobs:
  build-Linux-musl:
    name: build-Linux-musl (${{ github.ref_name }})
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set build variables
        run: |
          # Set all build variables with fallback logic
          echo "ARCHES=${{ inputs.ARCHES_LINUX_MUSL != '' && inputs.ARCHES_LINUX_MUSL || vars.ARCHES_LINUX_MUSL }}" >> $GITHUB_ENV
          echo "CURL_VERSION=${{ inputs.CURL_VERSION != '' && inputs.CURL_VERSION || vars.CURL_VERSION }}" >> $GITHUB_ENV
          echo "ENABLE_ECH=${{ inputs.ENABLE_ECH != '' && inputs.ENABLE_ECH || vars.ENABLE_ECH }}" >> $GITHUB_ENV
          echo "TLS_LIB=${{ inputs.TLS_LIB != '' && inputs.TLS_LIB || vars.TLS_LIB }}" >> $GITHUB_ENV
          echo "OPENSSL_VERSION=${{ inputs.OPENSSL_VERSION != '' && inputs.OPENSSL_VERSION || vars.OPENSSL_VERSION }}" >> $GITHUB_ENV
          echo "OPENSSL_BRANCH=${{ inputs.OPENSSL_BRANCH != '' && inputs.OPENSSL_BRANCH || vars.OPENSSL_BRANCH }}" >> $GITHUB_ENV
          echo "NGTCP2_VERSION=${{ vars.NGTCP2_VERSION }}" >> $GITHUB_ENV
          echo "NGHTTP3_VERSION=${{ vars.NGHTTP3_VERSION }}" >> $GITHUB_ENV
          echo "NGHTTP2_VERSION=${{ vars.NGHTTP2_VERSION }}" >> $GITHUB_ENV
          echo "LIBIDN2_VERSION=${{ vars.LIBIDN2_VERSION }}" >> $GITHUB_ENV
          echo "LIBUNISTRING_VERSION=${{ vars.LIBUNISTRING_VERSION }}" >> $GITHUB_ENV
          echo "ZLIB_VERSION=${{ vars.ZLIB_VERSION }}" >> $GITHUB_ENV
          echo "BROTLI_VERSION=${{ vars.BROTLI_VERSION }}" >> $GITHUB_ENV
          echo "ZSTD_VERSION=${{ vars.ZSTD_VERSION }}" >> $GITHUB_ENV
          echo "LIBSSH2_VERSION=${{ vars.LIBSSH2_VERSION }}" >> $GITHUB_ENV
          echo "ARES_VERSION=${{ vars.ARES_VERSION }}" >> $GITHUB_ENV
          echo "ENABLE_TRURL=${{ vars.ENABLE_TRURL_MUSL }}" >> $GITHUB_ENV
          echo "TRURL_VERSION=${{ vars.TRURL_VERSION }}" >> $GITHUB_ENV
          echo "LIBC=musl" >> $GITHUB_ENV
          echo "QBT_MUSL_CROSS_MAKE_VERSION=${{ vars.QBT_MUSL_CROSS_MAKE_VERSION }}" >> $GITHUB_ENV
          echo "STATIC_LIBRARY=1" >> $GITHUB_ENV
          echo "CONTAINER_IMAGE=debian:latest" >> $GITHUB_ENV
          echo "TOKEN_READ=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Cross Build Shared cURL
        run: sh curl-shared-cross.sh

      - name: Set up environment
        run: |
          tree -a release
          VERSION=`cat release/version.txt`
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Upload artifact (version)
        uses: actions/upload-artifact@v4
        with:
          name: curl-version
          path: release/version.txt
          retention-days: 90
          overwrite: true

      - name: Upload artifact install
        uses: actions/upload-artifact@v4
        with:
          name: curl-install-linux-musl-${{ env.VERSION }}
          path: release/curl-install*
          retention-days: 90
          compression-level: 0
          overwrite: true

      - name: Upload artifact src
        uses: actions/upload-artifact@v4
        with:
          name: curl-src-linux-musl-${{ env.VERSION }}
          path: release/curl-src*
          retention-days: 90
          compression-level: 0
          overwrite: true
